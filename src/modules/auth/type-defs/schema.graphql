enum Provider {
  Email
  Gmail
}

type AuthProvider {
  id: ID!
  email: Email!
  userName: String
  password: String
  provider: Provider!
  verifiedCode: Int
  verified: Boolean!
  userId: User
  role: [Role]!
  passwordChangedAt: Date
  passwordResetExpires: Date
  createdAt: Date
  updateAt: Date
}

input loginInput {
  email: Email!
  password: String!
}

input AuthProviderInput {
  userName: String!
  email: Email!
  password: String
  provider: Provider!
  role: [Role]
}

type AuthAndToken {
  token: String!
  auth: AuthProvider!
}

extend type Query {
  login(input: loginInput!): AuthAndToken
  me: AuthProvider @auth @hasRole(roles: [Admin])
}

extend type Mutation {
  signUp(input: AuthProviderInput!): AuthAndToken
  verified(code: Int!): AuthProvider @auth
}
